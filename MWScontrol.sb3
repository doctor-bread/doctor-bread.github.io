{"targets":[{"isStage":true,"name":"Stage","variables":{},"lists":{},"broadcasts":{},"blocks":{},"comments":{},"currentCostume":0,"costumes":[{"name":"backdrop1","dataFormat":"svg","assetId":"cd21514d0531fdffb22204e0ec5ed84a","md5ext":"cd21514d0531fdffb22204e0ec5ed84a.svg","rotationCenterX":240,"rotationCenterY":180}],"sounds":[],"volume":100,"layerOrder":0,"tempo":60,"videoTransparency":50,"videoState":"on","textToSpeechLanguage":null},{"isStage":false,"name":"mws","variables":{"y{_])z7|!:01t#z~s#hC":["datetime","2024-09-05 15:56:00"]},"lists":{},"broadcasts":{},"blocks":{"o":{"opcode":"serverData_loadFromServer","next":null,"parent":"a","inputs":{"variableName":[1,[10,"breadMWSTime.txt"]]},"fields":{},"shadow":false,"topLevel":false},"f":{"opcode":"sipctime_TimestampToTime","next":null,"parent":"g","inputs":{"timestamp":[3,"h",[4,"1725522981000"]]},"fields":{},"shadow":false,"topLevel":false},"h":{"opcode":"operator_join","next":null,"parent":"f","inputs":{"STRING1":[3,"a",[10,"apple "]],"STRING2":[1,[10,"000"]]},"fields":{},"shadow":false,"topLevel":false},"a":{"opcode":"strings_replace","next":null,"parent":"h","inputs":{"SUBSTRING":[3,"p",[10,"world"]],"STRING":[3,"o",[10,"Hello world!"]],"REPLACE":[1,[10,""]]},"fields":{},"shadow":false,"topLevel":false},"p":{"opcode":"utilities_newline","next":null,"parent":"a","inputs":{},"fields":{},"shadow":false,"topLevel":false},"i":{"opcode":"procedures_definition","next":"g","parent":null,"inputs":{"custom_block":[1,"q"]},"fields":{},"shadow":false,"topLevel":true,"x":1069,"y":64},"q":{"opcode":"procedures_prototype","next":null,"parent":"i","inputs":{},"fields":{},"shadow":true,"topLevel":false,"mutation":{"tagName":"mutation","children":[],"proccode":"rulebreak timestamp","argumentids":"[]","argumentnames":"[]","argumentdefaults":"[]","warp":"false"}},"g":{"opcode":"procedures_return","next":null,"parent":"i","inputs":{"VALUE":[3,"f",[10,""]]},"fields":{},"shadow":false,"topLevel":false},"r":{"opcode":"procedures_call","next":null,"parent":"s","inputs":{},"fields":{},"shadow":false,"topLevel":false,"mutation":{"tagName":"mutation","children":[],"proccode":"rulebreak timestamp","argumentids":"[]","warp":"false","return":"1"}},"j":{"opcode":"procedures_definition","next":"b","parent":null,"inputs":{"custom_block":[1,"c"]},"fields":{},"shadow":false,"topLevel":true,"x":1069,"y":272},"c":{"opcode":"procedures_prototype","next":null,"parent":"j","inputs":{"c1a2bca6ea8a80b50cf4":[1,"t"],",Sf{JL2LzF3^_iXrj@@Q":[1,"u"]},"fields":{},"shadow":true,"topLevel":false,"mutation":{"tagName":"mutation","children":[],"proccode":"set time to %s %s","argumentids":"[\"c1a2bca6ea8a80b50cf4\",\",Sf{JL2LzF3^_iXrj@@Q\"]","argumentnames":"[\"A\",\"B\"]","argumentdefaults":"[\"\",\"\"]","warp":"false"}},"t":{"opcode":"argument_reporter_string_number","next":null,"parent":"c","inputs":{},"fields":{"VALUE":["A"]},"shadow":true,"topLevel":false},"v":{"opcode":"procedures_call","next":null,"parent":null,"inputs":{"c1a2bca6ea8a80b50cf4":[1,"w"],",Sf{JL2LzF3^_iXrj@@Q":[1,[10,"15:56:00"]]},"fields":{},"shadow":false,"topLevel":true,"x":48,"y":192,"mutation":{"tagName":"mutation","children":[],"proccode":"set time to %s %s","argumentids":"[\"c1a2bca6ea8a80b50cf4\",\",Sf{JL2LzF3^_iXrj@@Q\"]","warp":"false"}},"w":{"opcode":"0znzwMoreFields_DateInline","next":null,"parent":"v","inputs":{},"fields":{"field_0znzwMoreFields_DateInline":["2024-09-05"]},"shadow":true,"topLevel":false},"s":{"opcode":"lmscomments_commentCommand","next":null,"parent":null,"inputs":{"COMMENT":[3,"r",[10,"comment"]]},"fields":{},"shadow":false,"topLevel":true,"x":48,"y":64},"b":{"opcode":"data_setvariableto","next":"k","parent":"j","inputs":{"VALUE":[3,"d",[10,"0"]]},"fields":{"VARIABLE":["datetime","y{_])z7|!:01t#z~s#hC"]},"shadow":false,"topLevel":false},"x":{"opcode":"argument_reporter_string_number","next":null,"parent":"d","inputs":{},"fields":{"VALUE":["A",null]},"shadow":false,"topLevel":false},"u":{"opcode":"argument_reporter_string_number","next":null,"parent":"c","inputs":{},"fields":{"VALUE":["B",null]},"shadow":true,"topLevel":false},"d":{"opcode":"operator_join","next":null,"parent":"b","inputs":{"STRING1":[3,"x",[10,"apple "]],"STRING2":[3,"l",[10,"banana"]]},"fields":{},"shadow":false,"topLevel":false},"y":{"opcode":"argument_reporter_string_number","next":null,"parent":"l","inputs":{},"fields":{"VALUE":["B",null]},"shadow":false,"topLevel":false},"l":{"opcode":"operator_join","next":null,"parent":"d","inputs":{"STRING1":[1,[10," "]],"STRING2":[3,"y",[10,""]]},"fields":{},"shadow":false,"topLevel":false},"k":{"opcode":"serverData_saveToServer","next":null,"parent":"b","inputs":{"variableName":[1,[10,"breadMWSTime.txt"]],"content":[3,"e",[10,""]]},"fields":{},"shadow":false,"topLevel":false},"z":{"opcode":"sipctime_TimeToTimestamp","next":null,"parent":"e","inputs":{"time":[3,[12,"datetime","y{_])z7|!:01t#z~s#hC"],[10,"2020-06-08 17:59:23"]]},"fields":{},"shadow":false,"topLevel":false},"e":{"opcode":"strings_letters_of","next":null,"parent":"k","inputs":{"LETTER1":[1,[4,"1"]],"LETTER2":[3,"m",[4,"4"]],"STRING":[3,"z",[10,"apple"]]},"fields":{},"shadow":false,"topLevel":false},"A":{"opcode":"sipctime_TimeToTimestamp","next":null,"parent":"n","inputs":{"time":[3,[12,"datetime","y{_])z7|!:01t#z~s#hC"],[10,"2020-06-08 17:59:23"]]},"fields":{},"shadow":false,"topLevel":false},"n":{"opcode":"operator_length","next":null,"parent":"m","inputs":{"STRING":[3,"A",[10,"apple"]]},"fields":{},"shadow":false,"topLevel":false},"m":{"opcode":"operator_subtract","next":null,"parent":"e","inputs":{"NUM1":[3,"n",[4,""]],"NUM2":[1,[4,"3"]]},"fields":{},"shadow":false,"topLevel":false},"B":{"opcode":"procedures_call","next":null,"parent":null,"inputs":{"c1a2bca6ea8a80b50cf4":[1,[10,"2024-09-05"]],",Sf{JL2LzF3^_iXrj@@Q":[1,[10,"15:56:00"]]},"fields":{},"shadow":false,"topLevel":true,"x":48,"y":320,"mutation":{"tagName":"mutation","children":[],"proccode":"set time to %s %s","argumentids":"[\"c1a2bca6ea8a80b50cf4\",\",Sf{JL2LzF3^_iXrj@@Q\"]","warp":"false"}}},"comments":{},"currentCostume":0,"costumes":[{"name":"costume1","bitmapResolution":1,"dataFormat":"svg","assetId":"927d672925e7b99f7813735c484c6922","md5ext":"927d672925e7b99f7813735c484c6922.svg","rotationCenterX":30.74937882782359,"rotationCenterY":58.864768144346826}],"sounds":[],"volume":100,"layerOrder":1,"visible":true,"x":0,"y":0,"size":100,"direction":90,"draggable":false,"rotationStyle":"all around"}],"monitors":[],"extensions":["serverData","sipctime","strings","utilities","0znzwMoreFields","lmscomments"],"extensionURLs":{"serverData":"data:text/javascript;base64,Ly8gU2ltcGxlIGZpbGUgc3RvcmFnZSBtYWRlIHdpdGggdG9vbHMgZnJvbSBTbmFwIQ0KDQpjbGFzcyBTZXJ2ZXJFeHRlbnNpb24gew0KICBjb25zdHJ1Y3RvcihydW50aW1lKSB7DQogICAgdGhpcy5ydW50aW1lID0gcnVudGltZTsNCiAgICB0aGlzLnNlcnZlclVSTCA9ICdodHRwczovL3NuYXBleHRlbnNpb25zLnVuaS1nb2V0dGluZ2VuLmRlL2hhbmRsZVRleHRmaWxlLnBocCc7DQogIH0NCg0KICBnZXRJbmZvKCkgew0KICAgIHJldHVybiB7DQogICAgICBpZDogJ3NlcnZlckRhdGEnLA0KICAgICAgbmFtZTogJ1NRTFNuYXAhIFNlcnZlcnMnLA0KICAgICAgY29sb3IxOiAnIzMxYjNkNCcsDQogICAgICBjb2xvcjI6ICcjMTc5ZmMyJywNCiAgICAgIGJsb2NrczogWw0KICAgICAgICB7DQogICAgICAgICAgb3Bjb2RlOiAnc2F2ZVRvU2VydmVyJywNCiAgICAgICAgICBibG9ja1R5cGU6IFNjcmF0Y2guQmxvY2tUeXBlLkNPTU1BTkQsDQogICAgICAgICAgdGV4dDogJ3NhdmUgW3ZhcmlhYmxlTmFtZV0gd2l0aCBjb250ZW50IFtjb250ZW50XScsDQogICAgICAgICAgYXJndW1lbnRzOiB7DQogICAgICAgICAgICB2YXJpYWJsZU5hbWU6IHsNCiAgICAgICAgICAgICAgdHlwZTogU2NyYXRjaC5Bcmd1bWVudFR5cGUuU1RSSU5HLA0KICAgICAgICAgICAgICBkZWZhdWx0VmFsdWU6ICdkZWZhdWx0LnR4dCcsDQogICAgICAgICAgICB9LA0KICAgICAgICAgICAgY29udGVudDogew0KICAgICAgICAgICAgICB0eXBlOiBTY3JhdGNoLkFyZ3VtZW50VHlwZS5TVFJJTkcsDQogICAgICAgICAgICAgIGRlZmF1bHRWYWx1ZTogJ0hlbGxvLCBXb3JsZCEnLA0KICAgICAgICAgICAgfSwNCiAgICAgICAgICB9LA0KICAgICAgICB9LA0KICAgICAgICB7DQogICAgICAgICAgb3Bjb2RlOiAnbG9hZEZyb21TZXJ2ZXInLA0KICAgICAgICAgIGJsb2NrVHlwZTogU2NyYXRjaC5CbG9ja1R5cGUuUkVQT1JURVIsDQogICAgICAgICAgdGV4dDogJ2xvYWQgW3ZhcmlhYmxlTmFtZV0nLA0KICAgICAgICAgIGFyZ3VtZW50czogew0KICAgICAgICAgICAgdmFyaWFibGVOYW1lOiB7DQogICAgICAgICAgICAgIHR5cGU6IFNjcmF0Y2guQXJndW1lbnRUeXBlLlNUUklORywNCiAgICAgICAgICAgICAgZGVmYXVsdFZhbHVlOiAnZGF0YS50eHQnLA0KICAgICAgICAgICAgfSwNCiAgICAgICAgICB9LA0KICAgICAgICB9LA0KICAgICAgICB7DQogICAgICAgICAgb3Bjb2RlOiAnZml0cycsDQogICAgICAgICAgYmxvY2tUeXBlOiBTY3JhdGNoLkJsb2NrVHlwZS5CT09MRUFOLA0KICAgICAgICAgIHRleHQ6ICdbZGF0YV0gZml0cyBvbiBzZXJ2ZXI/JywNCiAgICAgICAgICBhcmd1bWVudHM6IHsNCiAgICAgICAgICAgIGRhdGE6IHsNCiAgICAgICAgICAgICAgdHlwZTogU2NyYXRjaC5Bcmd1bWVudFR5cGUuU1RSSU5HLA0KICAgICAgICAgICAgICBkZWZhdWx0VmFsdWU6ICdkYXRhJywNCiAgICAgICAgICAgIH0sDQogICAgICAgICAgfSwNCiAgICAgICAgfSwNCiAgICAgICAgew0KICAgICAgICAgIG9wY29kZTogJ2RlbGV0ZUZyb21TZXJ2ZXInLA0KICAgICAgICAgIGJsb2NrVHlwZTogU2NyYXRjaC5CbG9ja1R5cGUuQ09NTUFORCwNCiAgICAgICAgICB0ZXh0OiAnZGVsZXRlIFt2YXJpYWJsZU5hbWVdJywNCiAgICAgICAgICBhcmd1bWVudHM6IHsNCiAgICAgICAgICAgIHZhcmlhYmxlTmFtZTogew0KICAgICAgICAgICAgICB0eXBlOiBTY3JhdGNoLkFyZ3VtZW50VHlwZS5TVFJJTkcsDQogICAgICAgICAgICAgIGRlZmF1bHRWYWx1ZTogJ2RhdGEudHh0JywNCiAgICAgICAgICAgIH0sDQogICAgICAgICAgfSwNCiAgICAgICAgfSwNCiAgICAgICAgew0KICAgICAgICAgIG9wY29kZTogJ2V4aXN0c09uU2VydmVyJywNCiAgICAgICAgICBibG9ja1R5cGU6IFNjcmF0Y2guQmxvY2tUeXBlLkJPT0xFQU4sDQogICAgICAgICAgdGV4dDogJ1t2YXJpYWJsZU5hbWVdIGV4aXN0cz8nLA0KICAgICAgICAgIGFyZ3VtZW50czogew0KICAgICAgICAgICAgdmFyaWFibGVOYW1lOiB7DQogICAgICAgICAgICAgIHR5cGU6IFNjcmF0Y2guQXJndW1lbnRUeXBlLlNUUklORywNCiAgICAgICAgICAgICAgZGVmYXVsdFZhbHVlOiAnZGF0YS50eHQnLA0KICAgICAgICAgICAgfSwNCiAgICAgICAgICB9LA0KICAgICAgICB9LA0KICAgICAgXSwNCiAgICB9Ow0KICB9DQoNCiAgc2F2ZVRvU2VydmVyKGFyZ3MsIHV0aWwpIHsNCiAgICBjb25zdCB2YXJpYWJsZU5hbWUgPSBhcmdzLnZhcmlhYmxlTmFtZTsNCiAgICBjb25zdCBjb250ZW50ID0gYXJncy5jb250ZW50Ow0KDQogICAgY29uc3QgdXJsID0NCiAgICAgIHRoaXMuc2VydmVyVVJMICsNCiAgICAgICc/dHlwZT13cml0ZScgKw0KICAgICAgJyZjb250ZW50PScgKw0KICAgICAgZW5jb2RlVVJJQ29tcG9uZW50KGNvbnRlbnQpICsNCiAgICAgICcmZmlsZW5hbWU9Li90ZXh0ZmlsZXMvJyArDQogICAgICBlbmNvZGVVUklDb21wb25lbnQodmFyaWFibGVOYW1lKTsNCg0KICAgIHJldHVybiBmZXRjaCh1cmwpDQogICAgICAudGhlbihyZXNwb25zZSA9PiByZXNwb25zZS50ZXh0KCkpDQogICAgICAudGhlbihyZXN1bHQgPT4gKHJlc3VsdCA9PT0gJ29rJykpDQogICAgICAuY2F0Y2goZXJyb3IgPT4gew0KICAgICAgICBjb25zb2xlLmVycm9yKCdGYWlsZWQgdG8gc2F2ZSBkYXRhOicsIGVycm9yKTsNCiAgICAgICAgcmV0dXJuIGZhbHNlOw0KICAgICAgfSk7DQogIH0NCg0KICBsb2FkRnJvbVNlcnZlcihhcmdzLCB1dGlsKSB7DQogICAgY29uc3QgdmFyaWFibGVOYW1lID0gYXJncy52YXJpYWJsZU5hbWU7DQoNCiAgICBjb25zdCB1cmwgPQ0KICAgICAgdGhpcy5zZXJ2ZXJVUkwgKw0KICAgICAgJz90eXBlPXJlYWQnICsNCiAgICAgICcmZmlsZW5hbWU9Li90ZXh0ZmlsZXMvJyArDQogICAgICBlbmNvZGVVUklDb21wb25lbnQodmFyaWFibGVOYW1lKTsNCg0KICAgIHJldHVybiBmZXRjaCh1cmwpDQogICAgICAudGhlbihyZXNwb25zZSA9PiByZXNwb25zZS50ZXh0KCkpDQogICAgICAuY2F0Y2goZXJyb3IgPT4gew0KICAgICAgICBjb25zb2xlLmVycm9yKCdGYWlsZWQgdG8gbG9hZCBkYXRhOicsIGVycm9yKTsNCiAgICAgICAgcmV0dXJuICJjYW4ndCBnZXQgZGF0YSI7DQogICAgICB9KTsNCiAgfQ0KDQogIGZpdHMoYXJncywgdXRpbCkgew0KICAgIHJldHVybiBhcmdzLmRhdGEubGVuZ3RoIDwgMTAwMDE7DQogIH0NCg0KICBkZWxldGVGcm9tU2VydmVyKGFyZ3MsIHV0aWwpIHsNCiAgICBjb25zdCB2YXJpYWJsZU5hbWUgPSBhcmdzLnZhcmlhYmxlTmFtZTsNCg0KICAgIGNvbnN0IHVybCA9DQogICAgICB0aGlzLnNlcnZlclVSTCArDQogICAgICAnP3R5cGU9ZGVsZXRlJyArDQogICAgICAnJmZpbGVuYW1lPS4vdGV4dGZpbGVzLycgKw0KICAgICAgZW5jb2RlVVJJQ29tcG9uZW50KHZhcmlhYmxlTmFtZSk7DQoNCiAgICByZXR1cm4gZmV0Y2godXJsKQ0KICAgICAgLnRoZW4ocmVzcG9uc2UgPT4gcmVzcG9uc2UudGV4dCgpKQ0KICAgICAgLnRoZW4ocmVzdWx0ID0+IChyZXN1bHQgPT09ICdvaycpKQ0KICAgICAgLmNhdGNoKGVycm9yID0+IHsNCiAgICAgICAgY29uc29sZS5lcnJvcignRmFpbGVkIHRvIGRlbGV0ZSBkYXRhOicsIGVycm9yKTsNCiAgICAgICAgcmV0dXJuIGZhbHNlOw0KICAgICAgfSk7DQogIH0NCg0KICBleGlzdHNPblNlcnZlcihhcmdzLCB1dGlsKSB7DQogICAgY29uc3QgdmFyaWFibGVOYW1lID0gYXJncy52YXJpYWJsZU5hbWU7DQoNCiAgICBjb25zdCB1cmwgPQ0KICAgICAgdGhpcy5zZXJ2ZXJVUkwgKw0KICAgICAgJz90eXBlPWV4aXN0cycgKw0KICAgICAgJyZmaWxlbmFtZT0uL3RleHRmaWxlcy8nICsNCiAgICAgIGVuY29kZVVSSUNvbXBvbmVudCh2YXJpYWJsZU5hbWUpOw0KDQogICAgcmV0dXJuIGZldGNoKHVybCkNCiAgICAgIC50aGVuKHJlc3BvbnNlID0+IHJlc3BvbnNlLnRleHQoKSkNCiAgICAgIC50aGVuKHJlc3VsdCA9PiAocmVzdWx0ID09PSAnZXhpc3RzJykpDQogICAgICAuY2F0Y2goZXJyb3IgPT4gew0KICAgICAgICBjb25zb2xlLmVycm9yKCdGYWlsZWQgdG8gY2hlY2sgZXhpc3RlbmNlIG9mIGRhdGE6JywgZXJyb3IpOw0KICAgICAgICByZXR1cm4gZmFsc2U7DQogICAgICB9KTsNCiAgfQ0KfQ0KDQpTY3JhdGNoLmV4dGVuc2lvbnMucmVnaXN0ZXIobmV3IFNlcnZlckV4dGVuc2lvbigpKTsNCg==","sipctime":"https://extensions.turbowarp.org/-SIPC-/time.js","strings":"https://extensions.turbowarp.org/text.js","utilities":"https://extensions.turbowarp.org/utilities.js","0znzwMoreFields":"data:text/javascript;base64,","lmscomments":"https://extensions.turbowarp.org/Lily/CommentBlocks.js"},"meta":{"semver":"3.0.0","vm":"0.2.0","agent":"","platform":{"name":"TurboWarp","url":"https://turbowarp.org/"}}}